// Code generated by protoc-gen-go. DO NOT EDIT.
// source: deos-server.proto

package deos_ingestion_v1alpa1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CompressionType int32

const (
	CompressionType_NO_COMPRESSION CompressionType = 0
)

var CompressionType_name = map[int32]string{
	0: "NO_COMPRESSION",
}

var CompressionType_value = map[string]int32{
	"NO_COMPRESSION": 0,
}

func (x CompressionType) String() string {
	return proto.EnumName(CompressionType_name, int32(x))
}

func (CompressionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cc3579a85bdc2eaa, []int{0}
}

type SignatureType int32

const (
	SignatureType_NO_SIGNATURE SignatureType = 0
)

var SignatureType_name = map[int32]string{
	0: "NO_SIGNATURE",
}

var SignatureType_value = map[string]int32{
	"NO_SIGNATURE": 0,
}

func (x SignatureType) String() string {
	return proto.EnumName(SignatureType_name, int32(x))
}

func (SignatureType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cc3579a85bdc2eaa, []int{1}
}

type SerializationType int32

const (
	SerializationType_JSON_ARRAY  SerializationType = 0
	SerializationType_JSON_OBJECT SerializationType = 1
)

var SerializationType_name = map[int32]string{
	0: "JSON_ARRAY",
	1: "JSON_OBJECT",
}

var SerializationType_value = map[string]int32{
	"JSON_ARRAY":  0,
	"JSON_OBJECT": 1,
}

func (x SerializationType) String() string {
	return proto.EnumName(SerializationType_name, int32(x))
}

func (SerializationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cc3579a85bdc2eaa, []int{2}
}

type IngestionRequest struct {
	AccountId            string            `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	SourceId             string            `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	CompressionType      CompressionType   `protobuf:"varint,3,opt,name=compression_type,json=compressionType,proto3,enum=deos.ingestion.v1alpa1.CompressionType" json:"compression_type,omitempty"`
	TimestampUsec        uint64            `protobuf:"varint,4,opt,name=timestamp_usec,json=timestampUsec,proto3" json:"timestamp_usec,omitempty"`
	SignatureType        SignatureType     `protobuf:"varint,5,opt,name=signature_type,json=signatureType,proto3,enum=deos.ingestion.v1alpa1.SignatureType" json:"signature_type,omitempty"`
	Signature            string            `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	SerializationType    SerializationType `protobuf:"varint,7,opt,name=serialization_type,json=serializationType,proto3,enum=deos.ingestion.v1alpa1.SerializationType" json:"serialization_type,omitempty"`
	PayloadSchema        string            `protobuf:"bytes,8,opt,name=payload_schema,json=payloadSchema,proto3" json:"payload_schema,omitempty"`
	Payload              []byte            `protobuf:"bytes,9,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *IngestionRequest) Reset()         { *m = IngestionRequest{} }
func (m *IngestionRequest) String() string { return proto.CompactTextString(m) }
func (*IngestionRequest) ProtoMessage()    {}
func (*IngestionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc3579a85bdc2eaa, []int{0}
}

func (m *IngestionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IngestionRequest.Unmarshal(m, b)
}
func (m *IngestionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IngestionRequest.Marshal(b, m, deterministic)
}
func (m *IngestionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IngestionRequest.Merge(m, src)
}
func (m *IngestionRequest) XXX_Size() int {
	return xxx_messageInfo_IngestionRequest.Size(m)
}
func (m *IngestionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IngestionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IngestionRequest proto.InternalMessageInfo

func (m *IngestionRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *IngestionRequest) GetSourceId() string {
	if m != nil {
		return m.SourceId
	}
	return ""
}

func (m *IngestionRequest) GetCompressionType() CompressionType {
	if m != nil {
		return m.CompressionType
	}
	return CompressionType_NO_COMPRESSION
}

func (m *IngestionRequest) GetTimestampUsec() uint64 {
	if m != nil {
		return m.TimestampUsec
	}
	return 0
}

func (m *IngestionRequest) GetSignatureType() SignatureType {
	if m != nil {
		return m.SignatureType
	}
	return SignatureType_NO_SIGNATURE
}

func (m *IngestionRequest) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *IngestionRequest) GetSerializationType() SerializationType {
	if m != nil {
		return m.SerializationType
	}
	return SerializationType_JSON_ARRAY
}

func (m *IngestionRequest) GetPayloadSchema() string {
	if m != nil {
		return m.PayloadSchema
	}
	return ""
}

func (m *IngestionRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type IngestionCount struct {
	IngestionCount       int32    `protobuf:"varint,1,opt,name=ingestion_count,json=ingestionCount,proto3" json:"ingestion_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IngestionCount) Reset()         { *m = IngestionCount{} }
func (m *IngestionCount) String() string { return proto.CompactTextString(m) }
func (*IngestionCount) ProtoMessage()    {}
func (*IngestionCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc3579a85bdc2eaa, []int{1}
}

func (m *IngestionCount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IngestionCount.Unmarshal(m, b)
}
func (m *IngestionCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IngestionCount.Marshal(b, m, deterministic)
}
func (m *IngestionCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IngestionCount.Merge(m, src)
}
func (m *IngestionCount) XXX_Size() int {
	return xxx_messageInfo_IngestionCount.Size(m)
}
func (m *IngestionCount) XXX_DiscardUnknown() {
	xxx_messageInfo_IngestionCount.DiscardUnknown(m)
}

var xxx_messageInfo_IngestionCount proto.InternalMessageInfo

func (m *IngestionCount) GetIngestionCount() int32 {
	if m != nil {
		return m.IngestionCount
	}
	return 0
}

type IngestionResponse struct {
	AccountId            string   `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Response             string   `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IngestionResponse) Reset()         { *m = IngestionResponse{} }
func (m *IngestionResponse) String() string { return proto.CompactTextString(m) }
func (*IngestionResponse) ProtoMessage()    {}
func (*IngestionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc3579a85bdc2eaa, []int{2}
}

func (m *IngestionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IngestionResponse.Unmarshal(m, b)
}
func (m *IngestionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IngestionResponse.Marshal(b, m, deterministic)
}
func (m *IngestionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IngestionResponse.Merge(m, src)
}
func (m *IngestionResponse) XXX_Size() int {
	return xxx_messageInfo_IngestionResponse.Size(m)
}
func (m *IngestionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IngestionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IngestionResponse proto.InternalMessageInfo

func (m *IngestionResponse) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *IngestionResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func init() {
	proto.RegisterEnum("deos.ingestion.v1alpa1.CompressionType", CompressionType_name, CompressionType_value)
	proto.RegisterEnum("deos.ingestion.v1alpa1.SignatureType", SignatureType_name, SignatureType_value)
	proto.RegisterEnum("deos.ingestion.v1alpa1.SerializationType", SerializationType_name, SerializationType_value)
	proto.RegisterType((*IngestionRequest)(nil), "deos.ingestion.v1alpa1.IngestionRequest")
	proto.RegisterType((*IngestionCount)(nil), "deos.ingestion.v1alpa1.IngestionCount")
	proto.RegisterType((*IngestionResponse)(nil), "deos.ingestion.v1alpa1.IngestionResponse")
}

func init() { proto.RegisterFile("deos-server.proto", fileDescriptor_cc3579a85bdc2eaa) }

var fileDescriptor_cc3579a85bdc2eaa = []byte{
	// 510 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0x61, 0x6b, 0xda, 0x40,
	0x18, 0xc7, 0xcd, 0xb4, 0xad, 0x79, 0x56, 0x63, 0x7c, 0x0a, 0x23, 0x74, 0x1b, 0x38, 0xc1, 0x35,
	0x15, 0x26, 0x6d, 0xb7, 0x37, 0x7b, 0xe9, 0x44, 0x86, 0xa5, 0x4b, 0xca, 0xc5, 0xc2, 0xf6, 0x2a,
	0xdc, 0xe2, 0xe1, 0x8e, 0x69, 0x2e, 0xcb, 0x9d, 0x05, 0xf7, 0xcd, 0xf6, 0x2d, 0xf6, 0x91, 0x86,
	0x17, 0x93, 0xaa, 0x9b, 0x74, 0x14, 0xfa, 0xf2, 0xf9, 0xdd, 0x23, 0xbf, 0x7b, 0xee, 0xff, 0x18,
	0x68, 0x8c, 0x99, 0x90, 0x6f, 0x24, 0x4b, 0x6f, 0x59, 0xda, 0x4d, 0x52, 0xa1, 0x04, 0x3e, 0x5b,
	0xa2, 0x2e, 0x8f, 0x27, 0x4c, 0x2a, 0x2e, 0xe2, 0xee, 0xed, 0x39, 0x9d, 0x26, 0xf4, 0xbc, 0xf5,
	0xbb, 0x0c, 0xf6, 0x30, 0xa7, 0x84, 0xfd, 0x98, 0x33, 0xa9, 0xf0, 0x25, 0x00, 0x8d, 0x22, 0x31,
	0x8f, 0x55, 0xc8, 0xc7, 0x8e, 0xd1, 0x34, 0x5c, 0x93, 0x98, 0x2b, 0x32, 0x1c, 0xe3, 0x73, 0x30,
	0xa5, 0x98, 0xa7, 0x11, 0x5b, 0x9e, 0x3e, 0xd1, 0xa7, 0xd5, 0x0c, 0x0c, 0xc7, 0x48, 0xc0, 0x8e,
	0xc4, 0x2c, 0x49, 0x99, 0x94, 0x5c, 0xc4, 0xa1, 0x5a, 0x24, 0xcc, 0x29, 0x37, 0x0d, 0xd7, 0xba,
	0x38, 0xe9, 0xfe, 0xfb, 0x0e, 0xdd, 0xfe, 0x5d, 0xff, 0x68, 0x91, 0x30, 0x52, 0x8f, 0x36, 0x01,
	0xb6, 0xc1, 0x52, 0x7c, 0xc6, 0xa4, 0xa2, 0xb3, 0x24, 0x9c, 0x4b, 0x16, 0x39, 0x95, 0xa6, 0xe1,
	0x56, 0x48, 0xad, 0xa0, 0x37, 0x92, 0x45, 0x78, 0x05, 0x96, 0xe4, 0x93, 0x98, 0xaa, 0x79, 0xca,
	0x32, 0xf1, 0x9e, 0x16, 0xb7, 0x77, 0x89, 0x83, 0xbc, 0x5b, 0x6b, 0x6b, 0x72, 0xbd, 0xc4, 0x17,
	0x60, 0x16, 0xc0, 0xd9, 0xcf, 0xde, 0xa0, 0x00, 0xf8, 0x19, 0x50, 0xb2, 0x94, 0xd3, 0x29, 0xff,
	0x49, 0x55, 0x31, 0xe8, 0x81, 0xf6, 0x9d, 0xee, 0xf4, 0xad, 0xff, 0x42, 0x3b, 0x1b, 0x72, 0x1b,
	0x2d, 0x87, 0x4d, 0xe8, 0x62, 0x2a, 0xe8, 0x38, 0x94, 0xd1, 0x37, 0x36, 0xa3, 0x4e, 0x55, 0xcb,
	0x6b, 0x2b, 0x1a, 0x68, 0x88, 0x0e, 0x1c, 0xac, 0x80, 0x63, 0x36, 0x0d, 0xf7, 0x90, 0xe4, 0x65,
	0xeb, 0x3d, 0x58, 0x45, 0xa2, 0xfd, 0x65, 0x64, 0x78, 0x02, 0xf5, 0xe2, 0x32, 0xa1, 0x4e, 0x51,
	0x87, 0xba, 0x47, 0x2c, 0xbe, 0xd1, 0xd8, 0xf2, 0xa0, 0xb1, 0xb6, 0x0c, 0x32, 0x11, 0xb1, 0x64,
	0xf7, 0x6d, 0xc3, 0x31, 0x54, 0xd3, 0x55, 0x6b, 0xbe, 0x0c, 0x79, 0xdd, 0x69, 0x43, 0x7d, 0x2b,
	0x5c, 0x44, 0xb0, 0x3c, 0x3f, 0xec, 0xfb, 0x9f, 0xae, 0xc9, 0x20, 0x08, 0x86, 0xbe, 0x67, 0x97,
	0x3a, 0xaf, 0xa0, 0xb6, 0x11, 0x05, 0xda, 0x70, 0xe8, 0xf9, 0x61, 0x30, 0xfc, 0xe8, 0xf5, 0x46,
	0x37, 0x64, 0x60, 0x97, 0x3a, 0xef, 0xa0, 0xf1, 0xd7, 0xeb, 0xa1, 0x05, 0x70, 0x19, 0xf8, 0x5e,
	0xd8, 0x23, 0xa4, 0xf7, 0xc5, 0x2e, 0x61, 0x1d, 0x9e, 0xea, 0xda, 0xff, 0x70, 0x39, 0xe8, 0x8f,
	0x6c, 0xe3, 0xe2, 0x57, 0x19, 0xcc, 0x62, 0x20, 0x9c, 0xc2, 0xd1, 0xb5, 0x90, 0x2a, 0xe0, 0xf1,
	0x64, 0xca, 0xee, 0xb0, 0xbb, 0x2b, 0xae, 0xed, 0xff, 0xc5, 0xf1, 0xe9, 0x7f, 0x74, 0x66, 0x93,
	0xb7, 0x4a, 0xf8, 0x7d, 0x65, 0x53, 0x29, 0xa3, 0xb3, 0x87, 0xd8, 0x5e, 0xdf, 0xdb, 0x99, 0x85,
	0x56, 0x72, 0x0d, 0x8c, 0xe1, 0xe8, 0x8a, 0x4b, 0x55, 0x9c, 0x64, 0xd6, 0x47, 0x1a, 0xed, 0xcc,
	0x40, 0x0a, 0x95, 0xe5, 0x70, 0x8f, 0x24, 0x70, 0x8d, 0x33, 0xe3, 0xeb, 0xbe, 0xfe, 0x70, 0xbd,
	0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x29, 0xec, 0x87, 0xcd, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IngestionClient is the client API for Ingestion service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IngestionClient interface {
	PostSingleIngestion(ctx context.Context, in *IngestionRequest, opts ...grpc.CallOption) (*IngestionResponse, error)
	PostStreamIngestion(ctx context.Context, opts ...grpc.CallOption) (Ingestion_PostStreamIngestionClient, error)
	ListIngestionStream(ctx context.Context, in *IngestionRequest, opts ...grpc.CallOption) (Ingestion_ListIngestionStreamClient, error)
	Post(ctx context.Context, opts ...grpc.CallOption) (Ingestion_PostClient, error)
}

type ingestionClient struct {
	cc grpc.ClientConnInterface
}

func NewIngestionClient(cc grpc.ClientConnInterface) IngestionClient {
	return &ingestionClient{cc}
}

func (c *ingestionClient) PostSingleIngestion(ctx context.Context, in *IngestionRequest, opts ...grpc.CallOption) (*IngestionResponse, error) {
	out := new(IngestionResponse)
	err := c.cc.Invoke(ctx, "/deos.ingestion.v1alpa1.Ingestion/PostSingleIngestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionClient) PostStreamIngestion(ctx context.Context, opts ...grpc.CallOption) (Ingestion_PostStreamIngestionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Ingestion_serviceDesc.Streams[0], "/deos.ingestion.v1alpa1.Ingestion/PostStreamIngestion", opts...)
	if err != nil {
		return nil, err
	}
	x := &ingestionPostStreamIngestionClient{stream}
	return x, nil
}

type Ingestion_PostStreamIngestionClient interface {
	Send(*IngestionRequest) error
	CloseAndRecv() (*IngestionCount, error)
	grpc.ClientStream
}

type ingestionPostStreamIngestionClient struct {
	grpc.ClientStream
}

func (x *ingestionPostStreamIngestionClient) Send(m *IngestionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ingestionPostStreamIngestionClient) CloseAndRecv() (*IngestionCount, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(IngestionCount)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ingestionClient) ListIngestionStream(ctx context.Context, in *IngestionRequest, opts ...grpc.CallOption) (Ingestion_ListIngestionStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Ingestion_serviceDesc.Streams[1], "/deos.ingestion.v1alpa1.Ingestion/ListIngestionStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &ingestionListIngestionStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ingestion_ListIngestionStreamClient interface {
	Recv() (*IngestionResponse, error)
	grpc.ClientStream
}

type ingestionListIngestionStreamClient struct {
	grpc.ClientStream
}

func (x *ingestionListIngestionStreamClient) Recv() (*IngestionResponse, error) {
	m := new(IngestionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ingestionClient) Post(ctx context.Context, opts ...grpc.CallOption) (Ingestion_PostClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Ingestion_serviceDesc.Streams[2], "/deos.ingestion.v1alpa1.Ingestion/Post", opts...)
	if err != nil {
		return nil, err
	}
	x := &ingestionPostClient{stream}
	return x, nil
}

type Ingestion_PostClient interface {
	Send(*IngestionRequest) error
	Recv() (*IngestionResponse, error)
	grpc.ClientStream
}

type ingestionPostClient struct {
	grpc.ClientStream
}

func (x *ingestionPostClient) Send(m *IngestionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ingestionPostClient) Recv() (*IngestionResponse, error) {
	m := new(IngestionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IngestionServer is the server API for Ingestion service.
type IngestionServer interface {
	PostSingleIngestion(context.Context, *IngestionRequest) (*IngestionResponse, error)
	PostStreamIngestion(Ingestion_PostStreamIngestionServer) error
	ListIngestionStream(*IngestionRequest, Ingestion_ListIngestionStreamServer) error
	Post(Ingestion_PostServer) error
}

// UnimplementedIngestionServer can be embedded to have forward compatible implementations.
type UnimplementedIngestionServer struct {
}

func (*UnimplementedIngestionServer) PostSingleIngestion(ctx context.Context, req *IngestionRequest) (*IngestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSingleIngestion not implemented")
}
func (*UnimplementedIngestionServer) PostStreamIngestion(srv Ingestion_PostStreamIngestionServer) error {
	return status.Errorf(codes.Unimplemented, "method PostStreamIngestion not implemented")
}
func (*UnimplementedIngestionServer) ListIngestionStream(req *IngestionRequest, srv Ingestion_ListIngestionStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ListIngestionStream not implemented")
}
func (*UnimplementedIngestionServer) Post(srv Ingestion_PostServer) error {
	return status.Errorf(codes.Unimplemented, "method Post not implemented")
}

func RegisterIngestionServer(s *grpc.Server, srv IngestionServer) {
	s.RegisterService(&_Ingestion_serviceDesc, srv)
}

func _Ingestion_PostSingleIngestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServer).PostSingleIngestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deos.ingestion.v1alpa1.Ingestion/PostSingleIngestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServer).PostSingleIngestion(ctx, req.(*IngestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ingestion_PostStreamIngestion_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IngestionServer).PostStreamIngestion(&ingestionPostStreamIngestionServer{stream})
}

type Ingestion_PostStreamIngestionServer interface {
	SendAndClose(*IngestionCount) error
	Recv() (*IngestionRequest, error)
	grpc.ServerStream
}

type ingestionPostStreamIngestionServer struct {
	grpc.ServerStream
}

func (x *ingestionPostStreamIngestionServer) SendAndClose(m *IngestionCount) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ingestionPostStreamIngestionServer) Recv() (*IngestionRequest, error) {
	m := new(IngestionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Ingestion_ListIngestionStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IngestionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IngestionServer).ListIngestionStream(m, &ingestionListIngestionStreamServer{stream})
}

type Ingestion_ListIngestionStreamServer interface {
	Send(*IngestionResponse) error
	grpc.ServerStream
}

type ingestionListIngestionStreamServer struct {
	grpc.ServerStream
}

func (x *ingestionListIngestionStreamServer) Send(m *IngestionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Ingestion_Post_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IngestionServer).Post(&ingestionPostServer{stream})
}

type Ingestion_PostServer interface {
	Send(*IngestionResponse) error
	Recv() (*IngestionRequest, error)
	grpc.ServerStream
}

type ingestionPostServer struct {
	grpc.ServerStream
}

func (x *ingestionPostServer) Send(m *IngestionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ingestionPostServer) Recv() (*IngestionRequest, error) {
	m := new(IngestionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Ingestion_serviceDesc = grpc.ServiceDesc{
	ServiceName: "deos.ingestion.v1alpa1.Ingestion",
	HandlerType: (*IngestionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostSingleIngestion",
			Handler:    _Ingestion_PostSingleIngestion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PostStreamIngestion",
			Handler:       _Ingestion_PostStreamIngestion_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ListIngestionStream",
			Handler:       _Ingestion_ListIngestionStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Post",
			Handler:       _Ingestion_Post_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "deos-server.proto",
}
